This is the intended use of cacheSolve is supposed to be used:

>   g <- matrix(c(4,3,1,4,6,8,0,4,2), 3, 3)
>   g1 <- makeCacheMatrix(g)
>   g2 <- cacheSolve(g1)
>   g2
      [,1]        [,2]       [,3]
[1,]  0.22727273  0.09090909 -0.1818182
[2,]  0.02272727 -0.09090909  0.1818182
[3,] -0.20454545  0.31818182 -0.1363636

Checking that it returns the inverse of matrix g

>   g2 %*% g
      [,1] [,2] [,3]
[1,] 1.000000e+00    0    0
[2,] 5.551115e-17    1    0
[3,] 0.000000e+00    0    1

==================================================================
Testing the components of makeCacheMatrix:

>   g <- matrix(c(4,3,1,4,6,8,0,4,2), 3, 3)
>   g1 <- makeCacheMatrix(g)
>   g1$get()
      [,1] [,2] [,3]
[1,]    4    4    0
[2,]    3    6    4
[3,]    1    8    2

This is how one sabortages the cached vector:

>   g1$set(10)
>   g1$get()
[1] 10

And the cached inverse
>   g1$setsolve(5)
>   g1$getsolve()
[1] 5

And force cacheSolve to return the wrong value as well.

g <- matrix(c(4,3,1,4,6,8,0,4,2), 3, 3)
g1 <- makeCacheMatrix(g)
g1$setsolve(5)
g3 <- cacheSolve(g1)
g3
[1] 5
